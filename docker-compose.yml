version: '3.8'
services:

  postgres:
    container_name: postgres_db
    restart: always
    image: postgres:14.3
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db_security
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - data_postgres_db:/var/lib/postgresql/data
    networks:
      - backend

  backend:
    container_name: spring-app-backend
    image: pblgllgs/security-sb3-backend:1.0.0
    environment:
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/db_security
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 20s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
      - frontend

  frontend:
    container_name: react-app-frontend
    image: pblgllgs/security-sb3-frontend:1.0.2-git-compose
    ports:
      - "80:80"
    expose:
      - "80"
    healthcheck:
      test: "curl --fail http://frontend"
      interval: 2s
      timeout: 5s
      retries: 5
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - frontend


volumes:
  data_postgres_db:
    external: false

networks:
  backend:
  frontend:
